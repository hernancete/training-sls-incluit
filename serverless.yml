service: sls-training

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

functions:
  FirstLambda:
    handler: src/firstLambda.handler
    environment:
      AN_ENV_VAR: 'Una variable util'
      QUEUE_URL: !Ref ColaQueue
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-FirstLambdaLambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - !GetAtt ColaQueue.Arn
    events:
      - http:
          path: training-sls/first
          method: post
          cors: true

  SecondLambda:
    handler: src/secondLambda.handler
    environment:
      OUTPUT_LAMBDA: ${self:service}-${self:provider.stage}-ThirdLambda
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-SecondLambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
        Resource:
          - !GetAtt ColaQueue.Arn
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
    events:
      - sqs:
          arn:
            !GetAtt ColaQueue.Arn
  ThirdLambda:
    handler: src/thirdLambda.handler
    environment:
      SNS_ARN: !Ref MailerTopic
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-ThirdLambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sns:Publish
        Resource: !Ref MailerTopic
   

resources:
  Resources:
    ColaQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-ColaQueue
    MailerTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Mailer SNS Topic
        TopicName: ${self:service}-${self:provider.stage}-MailerTopic
        Subscription:
          - Protocol: email
            Endpoint: marcosalejandrovalle@gmail.com
          
